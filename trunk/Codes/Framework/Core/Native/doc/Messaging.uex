<docs>
    <doc for="EndPoint.EndPoint">
        <summary>
            Initializes a new instance of the Microsoft.SPOT.Messaging.EndPoint class
            configured to work with a specific type.
        </summary>
        <param name="selector">The type used with this endpoint.</param>
        <param name="id">An identifier for this endpoint instance.</param>
    </doc>
    <doc for="EndPoint.GetMessage">
        <summary>
            Get a message.
        </summary>
        <param name="timeout">The length of time to wait for a message.</param>
        <returns>A message object if a message was received;  otherwise, null.</returns>
    </doc>
    <doc for="EndPoint.Check">
        <summary>
            Check to see if the RPC server is alive on the PC.
        </summary>
        <param name="selector">Type selector of the registered RPC server.</param>
        <param name="id">Id of the registered RPC server.</param>
        <param name="timeout">Length of time to wait for a response.</param>
    </doc>
    <doc for="EndPoint.SendMessage">
        <summary>
            Send a message.
        </summary>
        <param name="selector">Type selector of the RPC server.</param>
        <param name="id">Id of the RPC server.</param>
        <param name="timeout">The message timeout length.</param>
        <param name="payload">The contents of the message.</param>
        <returns>null if the message was sent successfully;  otherwise, the deserialized contents of the message.</returns>
    </doc>
    <doc for="EndPoint.SendMessageRaw">
        <summary>
            Send a message as a raw stream of bytes.
        </summary>
        <param name="selector">Type selector of the RPC server.</param>
        <param name="id">Id of the RPC server.</param>
        <param name="timeout">The message timeout length.</param>
        <param name="payload">The contents of the message.</param>
        <returns>null if the message was sent successfully;  otherwise, the deserialized contents of the message.</returns>
    </doc>    
    <doc for="Message">
        <summary>
            Represents a message sent on a network endpoint.  This class cannot be inherited.
        </summary>
    </doc>
    <doc for="RemotedException">
        <summary>
            Represents an exception that is thrown when an error has occured with a remote message.
        </summary>
    </doc>
    <doc for="RemotedException.m_message">
        <summary>
            The message that describes the current exception.
        </summary>
    </doc>
    <doc for="RemotedException.RemotedException">
        <summary>
            Initializes a new instance of the RemotedException class.
        </summary>
        <param name="payload">The exception that is the cause of the current exception.</param>
    </doc>
    <doc for="Message.Payload">
        <summary>
            Gets the contents of the message.
        </summary>
    </doc>
    <doc for="Message.PayloadRaw">
        <summary>
            Gets the raw contents of the message.
        </summary>
    </doc>
    <doc for="Message.Reply">
        <summary>
            Creates a reply message targeted to the sender.
        </summary>
        <param name="data">The contents of the reply message.</param>
    </doc>
    <doc for="Message.ReplyRaw">
        <summary>
            Creates a raw reply message targeted to the sender.
        </summary>
        <param name="data">The contents of the reply message.</param>
    </doc>
    <doc for="EndPoint">
        <summary>
            Represents a network endpoint as a messaging service.  This class cannot be inherited.
        </summary>
    </doc>
</docs>
